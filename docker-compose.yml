services:
  # üß† AI Dialer Backend
  ai_dialer:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: ai_dialer_server
    ports:
      - "3000:3000"
      # Port 4573 removed - AGI server no longer needed (using Telnyx webhooks)
    environment:
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ai_dialer
      - DB_USER=postgres
      - DB_PASSWORD=postgres

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=

      # API
      - NODE_ENV=development
      - DOCKER_ENV=true
      - PORT=3000
      - API_URL=http://localhost:3000/api/v1
      - API_INTERNAL_URL=http://ai_dialer:3000
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=24h

      # Asterisk ARI (still needed for manual browser phone calls)
      - ARI_URL=http://asterisk:8088/ari
      - ARI_USERNAME=ai-dialer
      - ARI_PASSWORD=ai-dialer-password

      # FastAGI removed - automated calls now use Telnyx Call Control API

      # Asterisk WebRTC Configuration
      - ASTERISK_HOST=localhost
      - ASTERISK_WS_PORT=8088

      # Telnyx Call Control API (for automated AI calls)
      # ‚ö° REQUIRED: Get your API key from portal.telnyx.com
      - TELNYX_API_KEY=KEY0199FFA0EB5D4947F9F3CD455BE32997
      - TELNYX_CONNECTION_ID=2811216964129653991
      - TELNYX_PHONE_NUMBER=+18058690081
      - TELNYX_DID=+18058690081

      # Telnyx WebRTC Configuration (for browser-based manual calls)
      - TELNYX_SIP_USERNAME=userinfo63399
      - TELNYX_SIP_PASSWORD=-WUgqhX.ZXYM
      - TELNYX_CALLER_ID=+18058690081
      - TELNYX_DOMAIN=sip.telnyx.com

      # Telnyx Legacy (kept for backward compatibility)
      - TELNYX_USERNAME=info@pitchnhire.com
      - TELNYX_PASSWORD=DxZU$m4#GuFhRTp
      - TELNYX_SIP_URI=sip:info@pitchnhire.com@sip.telnyx.com
      - TELNYX_IP_RANGE=66.109.0.0/16
      - TELNYX_TIMEOUT=30

      # Voice Stack
      - VOICE_STACK=self_hosted

      # CORS - Allow both local frontend and Docker frontend
      - CORS_ORIGIN=http://localhost:3001,http://localhost:3000,http://frontend:3001

      # Logging
      - LOG_LEVEL=info
      - DEBUG=ai-dialer:*
      - ENABLE_DEBUG_LOGS=true

      # Features
      - ENABLE_EMOTION_DETECTION=true
      - ENABLE_VOICE_ANALYTICS=true
      - ENABLE_CALL_RECORDING=true
      - ENABLE_REAL_TIME_MONITORING=true
      - ENABLE_AI_CONVERSATION=true

      # TTS - Using eSpeak for cost optimization
      - TTS_ENGINE=espeak
      - TTS_LANGUAGE=en-US
      - TTS_VOICE=en-us
      - TTS_SPEED=150
      - TTS_PITCH=50
      - TTS_VOLUME=100
      - TTS_CACHE_ENABLED=true
      - TTS_CACHE_TTL=3600
      - TTS_CACHE_MAX_SIZE=1000

      # Call Settings - Optimized for cost
      - DEFAULT_CALL_TIMEOUT=30
      - MAX_CALL_DURATION=180
      - MAX_CONCURRENT_CALLS=10

      # Rate Limiting - More generous for development
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000

      # Health Check
      - HEALTH_CHECK_INTERVAL=30000
      - HEALTH_CHECK_TIMEOUT=5000

      # Database Pool
      - DB_POOL_MIN=2
      - DB_POOL_MAX=10
      - DB_POOL_IDLE_TIMEOUT=30000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      asterisk:
        condition: service_started
    networks:
      - ai-dialer-net
    volumes:
      - ./server:/usr/src/app
      - ./logs:/usr/src/app/logs
      - ./audio-cache:/usr/src/app/audio-cache
      - ./asterisk-config:/usr/src/asterisk-config
      - ./docker-init.sh:/usr/local/bin/docker-init.sh
      - /usr/src/app/node_modules
    restart: always
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üåê AI Dialer Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: ai_dialer_frontend
    ports:
      - "3001:3001"
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api/v1
      - REACT_APP_WS_URL=ws://localhost:3000
      - REACT_APP_API_BASE_URL=http://localhost:3000
    depends_on:
      ai_dialer:
        condition: service_healthy
    networks:
      - ai-dialer-net
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
      - ./client/tailwind.config.js:/app/tailwind.config.js
      - ./client/postcss.config.js:/app/postcss.config.js
      - ./client/package.json:/app/package.json
      - /app/node_modules
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ‚òéÔ∏è Asterisk PBX Server
  asterisk:
    image: andrius/asterisk
    container_name: asterisk
    networks:
      - ai-dialer-net
    ports:
      - "5060:5060/udp"
      - "5060:5060/tcp"
      - "8088:8088"
    volumes:
      - ./asterisk-config:/etc/asterisk
      - ./asterisk-logs:/var/log/asterisk
      - ./audio-cache:/var/lib/asterisk/sounds/custom
      - ./server/asterisk:/var/lib/asterisk/agi-bin
      - ./asterisk-config/pjsip_dynamic.conf:/etc/asterisk/pjsip_dynamic.conf
    environment:
      - ARI_PASSWORD=ai-dialer-password
      - AGI_HOST=ai_dialer
      - AGI_PORT=4573
    restart: always

  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ai_dialer
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - ai-dialer-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_dialer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚ö° Redis Cache
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ai-dialer-net
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  ai-dialer-net:
    driver: bridge
volumes:
  pg_data:

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-ai_dialer}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-dialer-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    command: sh -c "redis-server ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli ${REDIS_PASSWORD:+-a $REDIS_PASSWORD} ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-dialer-network

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ai-dialer-backend
    restart: always
    environment:
      # Node Environment
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}

      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-ai_dialer}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_POOL_MIN=${DB_POOL_MIN:-2}
      - DB_POOL_MAX=${DB_POOL_MAX:-10}
      - DB_POOL_IDLE_TIMEOUT=${DB_POOL_IDLE_TIMEOUT:-30000}

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

      # JWT & Session
      - JWT_SECRET=${JWT_SECRET:-a8f5f167f44f4964e6c998dee827110c}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - SESSION_SECRET=${SESSION_SECRET:-change-this-session-secret}

      # API URLs
      - API_URL=${API_URL:-http://localhost:3000}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001,http://localhost:80}

      # Telnyx Configuration (Automated Calls - Call Control API)
      - TELNYX_API_KEY=${TELNYX_API_KEY}
      - TELNYX_CONNECTION_ID=${TELNYX_CONNECTION_ID}
      - TELNYX_PHONE_NUMBER=${TELNYX_PHONE_NUMBER}
      - TELNYX_DID=${TELNYX_PHONE_NUMBER}

      # Telnyx WebRTC/SIP Configuration (Manual Browser Calls)
      - TELNYX_SIP_USERNAME=${TELNYX_SIP_USERNAME}
      - TELNYX_SIP_PASSWORD=${TELNYX_SIP_PASSWORD}
      - TELNYX_CALLER_ID=${TELNYX_CALLER_ID}
      - TELNYX_DOMAIN=${TELNYX_DOMAIN:-sip.telnyx.com}
      - TELNYX_SIP_URI=${TELNYX_SIP_URI}
      - TELNYX_IP_RANGE=${TELNYX_IP_RANGE:-}

      # Voice Stack
      - VOICE_STACK=${VOICE_STACK:-self_hosted}

      # TTS Configuration
      - TTS_ENGINE=${TTS_ENGINE:-google}
      - TTS_LANGUAGE=${TTS_LANGUAGE:-en-US}
      - TTS_VOICE=${TTS_VOICE:-en-US-Wavenet-D}
      - TTS_SPEED=${TTS_SPEED:-1.0}
      - TTS_PITCH=${TTS_PITCH:-0.0}
      - TTS_VOLUME=${TTS_VOLUME:-0.0}
      - TTS_CACHE_ENABLED=${TTS_CACHE_ENABLED:-true}
      - TTS_CACHE_TTL=${TTS_CACHE_TTL:-3600}
      - TTS_CACHE_MAX_SIZE=${TTS_CACHE_MAX_SIZE:-1000}

      # Call Configuration
      - DEFAULT_CALL_TIMEOUT=${DEFAULT_CALL_TIMEOUT:-30}
      - MAX_CALL_DURATION=${MAX_CALL_DURATION:-300}
      - MAX_CONCURRENT_CALLS=${MAX_CONCURRENT_CALLS:-10}

      # Features
      - ENABLE_EMOTION_DETECTION=${ENABLE_EMOTION_DETECTION:-true}
      - ENABLE_VOICE_ANALYTICS=${ENABLE_VOICE_ANALYTICS:-true}
      - ENABLE_CALL_RECORDING=${ENABLE_CALL_RECORDING:-true}
      - ENABLE_REAL_TIME_MONITORING=${ENABLE_REAL_TIME_MONITORING:-true}
      - ENABLE_AI_CONVERSATION=${ENABLE_AI_CONVERSATION:-true}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FILE=${LOG_FILE:-logs/app.log}
      - ERROR_LOG_FILE=${ERROR_LOG_FILE:-logs/error.log}
      - DEBUG=${DEBUG:-ai-dialer:*}
      - ENABLE_DEBUG_LOGS=${ENABLE_DEBUG_LOGS:-true}

      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}

      # Health Check
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-5000}

      # SSL Configuration (optional)
      - SSL_ENABLED=${SSL_ENABLED:-false}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-}

    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
      - ./audio-cache:/app/audio-cache

    ports:
      - "3000:3000"

    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    networks:
      - ai-dialer-network

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Frontend React App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: /api/v1
        REACT_APP_WS_URL: /ws
    container_name: ai-dialer-frontend
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount SSL certificates if available
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-dialer-network
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-dialer-network:
    driver: bridge

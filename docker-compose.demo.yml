services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-dialer-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_dialer_prod}
      POSTGRES_USER: ${POSTGRES_USER:-ai_dialer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_dialer_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-dialer-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-dialer-redis
    restart: always
    command: redis-server ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli ${REDIS_PASSWORD:+-a $REDIS_PASSWORD} ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-dialer-network

  # Asterisk VoIP Server
  asterisk:
    build:
      context: .
      dockerfile: Dockerfile.asterisk
    container_name: ai-dialer-asterisk
    restart: always
    environment:
      ARI_USERNAME: ${ARI_USERNAME:-ai-dialer}
      ARI_PASSWORD: ${ARI_PASSWORD}
    volumes:
      - ./asterisk-config:/etc/asterisk
      - ./asterisk-logs:/var/log/asterisk
      - asterisk_sounds:/var/lib/asterisk/sounds
    ports:
      - "8088:8088"
      - "5060:5060/udp"
      - "10000-10100:10000-10100/udp"
    networks:
      - ai-dialer-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ai-dialer-backend
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-ai_dialer_prod}
      - POSTGRES_USER=${POSTGRES_USER:-ai_dialer_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-ai_dialer_prod}
      - DB_USER=${POSTGRES_USER:-ai_dialer_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # Asterisk Configuration
      - ASTERISK_HOST=asterisk
      - ASTERISK_ARI_PORT=8088
      - ARI_URL=http://asterisk:8088/ari
      - ARI_USERNAME=${ARI_USERNAME:-ai-dialer}
      - ARI_PASSWORD=${ARI_PASSWORD}
      # JWT & Session
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - JWT_EXPIRES_IN=7d
      - SESSION_SECRET=${SESSION_SECRET:-change-this-session-secret}
      # CORS Configuration (use CLIENT_URL env var or default to localhost)
      - CORS_ORIGIN=${CLIENT_URL:-http://localhost:3001}
      - API_URL=${API_URL:-http://localhost:3000}
      # Application Settings
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MAX_CONCURRENT_CALLS=${MAX_CONCURRENT_CALLS:-10}
      - VOICE_STACK=${VOICE_STACK:-self_hosted}
      - DEFAULT_CALL_TIMEOUT=${DEFAULT_CALL_TIMEOUT:-30}
      - MAX_CALL_DURATION=${MAX_CALL_DURATION:-300}
      - DEBUG=${DEBUG:-ai-dialer:*}
      - ENABLE_DEBUG_LOGS=${ENABLE_DEBUG_LOGS:-true}
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - TELNYX_API_KEY=${TELNYX_API_KEY:-KEY0199FFA0EB5D4947F9F3CD455BE32997}
      # Telnyx SIP Configuration
      - TELNYX_SIP_USERNAME=${TELNYX_SIP_USERNAME:-userinfo63399}
      - TELNYX_SIP_PASSWORD=${TELNYX_SIP_PASSWORD:--WUgqhX.ZXYM}
      - TELNYX_CALLER_ID=${TELNYX_CALLER_ID:-+18058690081}
      - TELNYX_PHONE_NUMBER=${TELNYX_PHONE_NUMBER:-+18058690081}
      - TELNYX_DOMAIN=${TELNYX_DOMAIN:-sip.telnyx.com}
      - TELNYX_SIP_URI=${TELNYX_SIP_URI:-userinfo63399@sip.telnyx.com}
      - TELNYX_IP_RANGE=${TELNYX_IP_RANGE:-}
      # TTS Configuration
      - TTS_ENGINE=${TTS_ENGINE:-google}
      - TTS_LANGUAGE=${TTS_LANGUAGE:-en-US}
      - TTS_VOICE=${TTS_VOICE:-en-US-Wavenet-D}
      - TTS_SPEED=${TTS_SPEED:-1.0}
      - TTS_PITCH=${TTS_PITCH:-0.0}
      - TTS_VOLUME=${TTS_VOLUME:-0.0}
      - TTS_CACHE_ENABLED=${TTS_CACHE_ENABLED:-true}
      - TTS_CACHE_TTL=${TTS_CACHE_TTL:-3600}
      - TTS_CACHE_MAX_SIZE=${TTS_CACHE_MAX_SIZE:-1000}
      # Features
      - ENABLE_EMOTION_DETECTION=${ENABLE_EMOTION_DETECTION:-true}
      - ENABLE_VOICE_ANALYTICS=${ENABLE_VOICE_ANALYTICS:-true}
      - ENABLE_CALL_RECORDING=${ENABLE_CALL_RECORDING:-true}
      - ENABLE_REAL_TIME_MONITORING=${ENABLE_REAL_TIME_MONITORING:-true}
      - ENABLE_AI_CONVERSATION=${ENABLE_AI_CONVERSATION:-true}
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      # Health Check
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-5000}
      # Database Pool
      - DB_POOL_MIN=${DB_POOL_MIN:-2}
      - DB_POOL_MAX=${DB_POOL_MAX:-10}
      - DB_POOL_IDLE_TIMEOUT=${DB_POOL_IDLE_TIMEOUT:-30000}
      # Logging
      - LOG_FILE=${LOG_FILE:-logs/app.log}
      - ERROR_LOG_FILE=${ERROR_LOG_FILE:-logs/error.log}
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
      - ./audio-cache:/app/audio-cache
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-dialer-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      asterisk:
        condition: service_started

  # Frontend React App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: /api/v1
        REACT_APP_WS_URL: /ws
    container_name: ai-dialer-frontend
    restart: always
    ports:
      - "3001:80"
    networks:
      - ai-dialer-network
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  asterisk_sounds:
    driver: local

networks:
  ai-dialer-network:
    driver: bridge

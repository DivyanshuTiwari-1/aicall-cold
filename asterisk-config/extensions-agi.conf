;===============================================
; AI Dialer FastAGI Dialplan Configuration
; Routes AI automated calls to Node.js FastAGI server
;===============================================

[ai-dialer-stasis]
; This context is triggered when Stasis app passes control to dialplan
; The FastAGI server will handle the actual conversation

exten => s,1,NoOp(=== AI Dialer FastAGI Context ===)
 same => n,NoOp(Call ID: ${CALL_ID})
 same => n,NoOp(Contact Phone: ${CONTACT_PHONE})
 same => n,NoOp(Campaign ID: ${CAMPAIGN_ID})

 ; Set AGI host and port from environment or use defaults
 ; In Docker, use service name 'server'; otherwise localhost
 same => n,Set(AGI_HOST=${IF($["${ENV(AGI_HOST)}" != ""]?${ENV(AGI_HOST)}:server)})
 same => n,Set(AGI_PORT=${IF($["${ENV(AGI_PORT)}" != ""]?${ENV(AGI_PORT)}:4573)})

 ; Execute FastAGI with call parameters
 same => n(execute_agi),NoOp(Connecting to FastAGI: agi://${AGI_HOST}:${AGI_PORT})
 same => n,AGI(agi://${AGI_HOST}:${AGI_PORT},${CALL_ID},${CONTACT_PHONE},${CAMPAIGN_ID})

 ; After AGI completes
 same => n,NoOp(FastAGI completed for call ${CALL_ID})
 same => n,Hangup()

; Error handling
exten => h,1,NoOp(Call hangup detected in AI dialer context)

; Invalid extension handling
exten => i,1,NoOp(Invalid extension in AI dialer context)
 same => n,Hangup()

; Timeout handling
exten => t,1,NoOp(Timeout in AI dialer context)
 same => n,Hangup()

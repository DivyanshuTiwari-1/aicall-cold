╔════════════════════════════════════════════════════════════════╗
║                                                                ║
║     AI DIALER - PRODUCTION DEPLOYMENT                         ║
║     ========================================                   ║
║                                                                ║
║     ✅ EVERYTHING READY TO DEPLOY!                            ║
║                                                                ║
╚════════════════════════════════════════════════════════════════╝

📋 WHAT YOU NEED TO DO:

  1. EDIT deploy.sh (line 12)
     ━━━━━━━━━━━━━━━━━━━━━━
     Change: DOMAIN="yourdomain.com"
     To:     DOMAIN="your-actual-domain.com"

  2. PUSH TO GITHUB
     ━━━━━━━━━━━━━━
     git add deploy.sh
     git commit -m "Configure production domain"
     git push origin main

  3. SETUP DNS RECORDS
     ━━━━━━━━━━━━━━━━
     Give these to your DNS admin:

     A    @      YOUR_AWS_IP    3600
     A    www    YOUR_AWS_IP    3600
     A    api    YOUR_AWS_IP    3600

     (Get AWS IP: curl ifconfig.me)

  4. DEPLOY ON AWS SERVER
     ━━━━━━━━━━━━━━━━━━
     ssh ubuntu@your-aws-ip
     git clone <your-repo> /opt/ai-dialer
     cd /opt/ai-dialer
     chmod +x deploy.sh
     ./deploy.sh

═══════════════════════════════════════════════════════════════════

🔄 DAILY WORKFLOW (After First Deployment):

   Local:
   ──────
   git add .
   git commit -m "Your changes"
   git push origin main

   Production:
   ───────────
   ssh ubuntu@your-aws-ip
   cd /opt/ai-dialer
   git pull origin main
   ./deploy.sh

═══════════════════════════════════════════════════════════════════

✅ WHAT'S PROTECTED (Never Lost):

   ✓ All database data (users, campaigns, contacts, calls)
   ✓ User uploads
   ✓ Application logs
   ✓ SSL certificates
   ✓ Redis cache/sessions
   ✓ Backups (automatic before each update)

═══════════════════════════════════════════════════════════════════

🎯 WHAT deploy.sh DOES AUTOMATICALLY:

   1. Backs up database (if exists)
   2. Generates secure passwords (first time)
   3. Creates all config files
   4. Sets up SSL certificate
   5. Cleans old containers/images (frees space!)
   6. Builds and deploys services
   7. Runs database migrations
   8. Creates admin user (first time)
   9. Configures firewall
   10. Verifies everything works

═══════════════════════════════════════════════════════════════════

📁 FILES CREATED:

   ✓ deploy.sh                  - Main deployment script
   ✓ START_HERE.md             - Quick start guide
   ✓ DEPLOYMENT_README.md      - Simple deployment guide
   ✓ PRODUCTION_DEPLOYMENT.md  - Complete documentation

   Old scripts (can ignore):
   - deploy-production.sh      - Replaced by deploy.sh
   - update-production.sh      - Replaced by deploy.sh
   - rollback-production.sh    - Use backups/ folder

═══════════════════════════════════════════════════════════════════

🔐 DEFAULT LOGIN (After First Deployment):

   URL:      https://yourdomain.com
   Email:    admin@yourdomain.com
   Password: Admin123!

   ⚠️  Change password immediately!

═══════════════════════════════════════════════════════════════════

🆘 IF SOMETHING GOES WRONG:

   View logs:
   docker-compose -f docker-compose.demo.yml logs -f

   Restart:
   docker-compose -f docker-compose.demo.yml restart

   Restore backup:
   ls backups/
   gunzip < backups/backup_YYYYMMDD.sql.gz | \
     docker exec -i ai-dialer-postgres psql -U ai_dialer_user ai_dialer_prod

═══════════════════════════════════════════════════════════════════

📞 AWS SECURITY GROUP PORTS:

   22          SSH
   80          HTTP
   443         HTTPS
   3000        Backend API
   3001        Frontend
   5060/UDP    SIP
   8088        Asterisk ARI
   10000-10100/UDP  RTP Media

═══════════════════════════════════════════════════════════════════

📚 DOCUMENTATION:

   Quick Start:   START_HERE.md
   Simple Guide:  DEPLOYMENT_README.md
   Full Docs:     PRODUCTION_DEPLOYMENT.md

═══════════════════════════════════════════════════════════════════

🎉 READY TO DEPLOY!

   Read: START_HERE.md
   Then: Edit deploy.sh and deploy!

═══════════════════════════════════════════════════════════════════

name: Deploy to Production

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest

    steps:
      - name: 📋 Deployment Info
        run: |
          echo "🚀 Starting deployment to production"
          echo "📦 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
          echo "💬 Message: ${{ github.event.head_commit.message }}"
          echo "🌿 Branch: ${{ github.ref_name }}"

      - name: 🔐 Validate SSH Configuration
        run: |
          if [ -z "${{ secrets.PRODUCTION_HOST }}" ]; then
            echo "❌ ERROR: PRODUCTION_HOST secret not set"
            echo "   Set it to: 13.53.89.241"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_USER }}" ]; then
            echo "❌ ERROR: PRODUCTION_USER secret not set"
            echo "   Set it to: ubuntu"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_SSH_KEY }}" ]; then
            echo "❌ ERROR: PRODUCTION_SSH_KEY secret not set"
            echo "   Copy contents of ~/.ssh/ai-dialer-key.pem"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: 🚀 Smart Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: 22
          command_timeout: 20m
          script: |
            set -e
            
            # Application directory
            APP_DIR="$HOME/aicall"
            echo "📂 Navigating to: $APP_DIR"
            cd "$APP_DIR"
            
            # Pull latest code and detect changes
            echo "📥 Pulling latest code..."
            BEFORE_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "init")
            git fetch origin
            git reset --hard origin/main
            AFTER_COMMIT=$(git rev-parse HEAD)
            
            echo "✓ Code updated to: $(git log --oneline -1)"
            echo ""
            
            # Detect what changed
            if [ "$BEFORE_COMMIT" != "init" ]; then
              CHANGED_FILES=$(git diff --name-only $BEFORE_COMMIT $AFTER_COMMIT)
              echo "📝 Changed files:"
              echo "$CHANGED_FILES" | sed 's/^/  - /'
              echo ""
            else
              CHANGED_FILES="all"
              echo "📝 Initial deployment - all files"
            fi
            
            # Check if we need to rebuild (dependency changes)
            REBUILD_FRONTEND=false
            REBUILD_BACKEND=false
            
            if echo "$CHANGED_FILES" | grep -q "client/package.json\|client/Dockerfile"; then
                REBUILD_FRONTEND=true
                echo "🔨 Frontend rebuild needed (dependencies changed)"
            elif echo "$CHANGED_FILES" | grep -q "^client/"; then
                echo "📝 Frontend code changes detected (no rebuild needed)"
            fi
            
            if echo "$CHANGED_FILES" | grep -q "server/package.json\|server/Dockerfile"; then
                REBUILD_BACKEND=true
                echo "🔨 Backend rebuild needed (dependencies changed)"
            elif echo "$CHANGED_FILES" | grep -q "^server/"; then
                echo "📝 Backend code changes detected (no rebuild needed)"
            fi
            
            echo ""
            
            # Rebuild only if dependencies changed
            if [ "$REBUILD_FRONTEND" = true ] || [ "$REBUILD_BACKEND" = true ]; then
                echo "🔨 Rebuilding changed services..."
                
                SERVICES_TO_BUILD=""
                [ "$REBUILD_FRONTEND" = true ] && SERVICES_TO_BUILD="$SERVICES_TO_BUILD frontend"
                [ "$REBUILD_BACKEND" = true ] && SERVICES_TO_BUILD="$SERVICES_TO_BUILD backend"
                
                echo "   📦 Building: $SERVICES_TO_BUILD"
                docker compose build $SERVICES_TO_BUILD
                echo "✅ Build complete"
                echo ""
            fi
            
            # Always restart containers to pick up changes
            echo "🔄 Restarting services..."
            docker compose down
            docker compose up -d
            
            echo ""
            echo "⏳ Waiting for services to be healthy..."
            sleep 10
            
            # Wait for backend to be healthy
            MAX_TRIES=30
            for i in $(seq 1 $MAX_TRIES); do
              if docker exec ai-dialer-backend curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
                echo "✅ Backend is healthy"
                break
              fi
              if [ $i -eq $MAX_TRIES ]; then
                echo "⚠️  Backend took too long to become healthy"
              fi
              sleep 2
            done
            
            echo ""
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            
            echo ""
            echo "✅ Deployment completed successfully!"
            echo "🎉 Production is now running the latest code"

      - name: 🔍 Verify Deployment
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: 22
          script: |
            cd "$HOME/aicall"
            
            echo "📊 Service Status:"
            docker compose ps
            
            echo ""
            echo "🔍 Testing endpoints..."
            
            # Test backend health
            if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Backend health check passed"
              curl -s http://localhost:3000/health | jq .
            else
              echo "⚠️  Backend health check failed"
            fi
            
            # Test frontend
            if curl -k -f -s https://localhost > /dev/null 2>&1; then
              echo "✅ Frontend is accessible"
            else
              echo "⚠️  Frontend check failed"
            fi
            
            # Test domain
            if curl -k -f -s https://atsservice.site > /dev/null 2>&1; then
              echo "✅ Domain (atsservice.site) is accessible"
            else
              echo "⚠️  Domain check failed"
            fi
            
            echo ""
            echo "💾 Disk space:"
            df -h / | grep -E 'Filesystem|/$'
            
            echo ""
            echo "🐳 Container resource usage:"
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

      - name: ✅ Deployment Success
        if: success()
        run: |
          echo "✅ ========================================="
          echo "✅ DEPLOYMENT SUCCESSFUL!"
          echo "✅ ========================================="
          echo ""
          echo "📦 Deployed commit: ${{ github.sha }}"
          echo "💬 Commit message: ${{ github.event.head_commit.message }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo ""
          echo "🌐 Your production app is now updated!"
          echo "🔗 Check it at: https://atsservice.site/"
          echo ""
          echo "📋 Changes are live - test your application!"

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "❌ ========================================="
          echo "❌ DEPLOYMENT FAILED!"
          echo "❌ ========================================="
          echo ""
          echo "Please check the logs above for details."
          echo ""
          echo "Common issues:"
          echo "  1. SSH secrets not configured - check GitHub Secrets"
          echo "  2. Git pull failed - check repository access"
          echo "  3. Docker build failed - check Dockerfile"
          echo "  4. Services not starting - check docker compose logs"
          echo ""
          echo "To investigate, SSH to server:"
          echo "  ssh -i ~/.ssh/ai-dialer-key.pem ubuntu@13.53.89.241"
          echo "  cd ~/aicall"
          echo "  docker compose ps"
          echo "  docker compose logs --tail=50"
          exit 1

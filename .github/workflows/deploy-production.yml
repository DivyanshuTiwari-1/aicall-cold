name: Deploy to Production

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:  # Allows manual trigger from GitHub UI
    inputs:
      skip_backup:
        description: 'Skip database backup'
        required: false
        default: 'false'

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest

    steps:
      - name: üìã Deployment Info
        run: |
          echo "üöÄ Starting deployment to production"
          echo "üì¶ Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üí¨ Message: ${{ github.event.head_commit.message }}"
          echo "üåø Branch: ${{ github.ref_name }}"

      - name: üîê Validate SSH Configuration
        run: |
          if [ -z "${{ secrets.PRODUCTION_HOST }}" ]; then
            echo "‚ùå ERROR: PRODUCTION_HOST secret not set"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_USER }}" ]; then
            echo "‚ùå ERROR: PRODUCTION_USER secret not set"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_SSH_KEY }}" ]; then
            echo "‚ùå ERROR: PRODUCTION_SSH_KEY secret not set"
            exit 1
          fi
          echo "‚úÖ All required secrets are configured"

      - name: üöÄ Smart Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT || 22 }}
          command_timeout: 20m
          script: |
            set -e

            # Navigate to application directory
            APP_DIR="${{ secrets.PRODUCTION_APP_DIR }}"
            if [ -z "$APP_DIR" ]; then
              APP_DIR="/opt/ai-dialer"
            fi

            echo "üìÇ Navigating to: $APP_DIR"
            cd "$APP_DIR"

            # Check disk space before deployment
            echo ""
            echo "üíæ Checking disk space..."
            DISK_AVAIL=$(df / | tail -1 | awk '{print $4}')
            DISK_AVAIL_GB=$((DISK_AVAIL / 1024 / 1024))
            echo "   Available: ${DISK_AVAIL_GB}GB"

            if [ "$DISK_AVAIL_GB" -lt 2 ]; then
              echo "‚ùå ERROR: Low disk space (${DISK_AVAIL_GB}GB available)"
              echo "   At least 2GB free space is required for deployment"
              echo ""
              echo "üßπ Running automatic cleanup..."

              # Auto cleanup
              docker image prune -af
              docker container prune -f
              docker system prune -f

              # Check again
              DISK_AVAIL_AFTER=$(df / | tail -1 | awk '{print $4}')
              DISK_AVAIL_AFTER_GB=$((DISK_AVAIL_AFTER / 1024 / 1024))
              echo "   Available after cleanup: ${DISK_AVAIL_AFTER_GB}GB"

              if [ "$DISK_AVAIL_AFTER_GB" -lt 2 ]; then
                echo "‚ùå Still not enough space. Manual intervention required."
                echo "   SSH to server and run: bash cleanup-production-disk.sh"
                exit 1
              fi

              echo "‚úÖ Enough space freed, continuing deployment..."
            else
              echo "‚úÖ Sufficient disk space available"
            fi
            echo ""

            # Pull latest code and detect changes
            echo "üì• Pulling latest code..."
            BEFORE_COMMIT=$(git rev-parse HEAD)
            git fetch origin
            git reset --hard origin/main
            AFTER_COMMIT=$(git rev-parse HEAD)

            echo "‚úì Code updated: $(git log --oneline -1)"
            echo ""

            # Detect what changed
            CHANGED_FILES=$(git diff --name-only $BEFORE_COMMIT $AFTER_COMMIT || echo "all")
            echo "üìù Changed files:"
            echo "$CHANGED_FILES"
            echo ""

            # Determine what needs rebuilding
            REBUILD_FRONTEND=false
            REBUILD_BACKEND=false
            REBUILD_ASTERISK=false

            if echo "$CHANGED_FILES" | grep -q "^client/"; then
                REBUILD_FRONTEND=true
                echo "üîÑ Frontend changes detected"
            fi

            if echo "$CHANGED_FILES" | grep -q "^server/"; then
                REBUILD_BACKEND=true
                echo "üîÑ Backend changes detected"
            fi

            if echo "$CHANGED_FILES" | grep -q "asterisk-config/\|Dockerfile.asterisk"; then
                REBUILD_ASTERISK=true
                echo "üîÑ Asterisk changes detected"
            fi

            echo ""

            # Smart rebuild - only rebuild what changed
            if [ "$REBUILD_FRONTEND" = true ] || [ "$REBUILD_BACKEND" = true ] || [ "$REBUILD_ASTERISK" = true ]; then
                echo "üî® Rebuilding changed services in parallel..."

                # Build list of services to rebuild
                SERVICES_TO_BUILD=""

                if [ "$REBUILD_FRONTEND" = true ]; then
                    SERVICES_TO_BUILD="$SERVICES_TO_BUILD frontend"
                fi

                if [ "$REBUILD_BACKEND" = true ]; then
                    SERVICES_TO_BUILD="$SERVICES_TO_BUILD backend"
                fi

                if [ "$REBUILD_ASTERISK" = true ]; then
                    SERVICES_TO_BUILD="$SERVICES_TO_BUILD asterisk"
                fi

                echo "   üì¶ Building: $SERVICES_TO_BUILD"
                docker-compose -f docker-compose.demo.yml build --parallel $SERVICES_TO_BUILD

                echo ""
                echo "üöÄ Restarting services..."
                docker-compose -f docker-compose.demo.yml up -d

                # Run migrations if backend changed
                if [ "$REBUILD_BACKEND" = true ]; then
                    echo ""
                    echo "‚è≥ Waiting for backend..."
                    sleep 15
                    echo "üîÑ Running migrations..."
                    docker exec ai-dialer-backend npm run migrate || echo "‚ö†Ô∏è Migrations already applied"
                fi

                echo ""
                echo "üßπ Cleaning up old images..."
                docker image prune -f

            else
                echo "‚ÑπÔ∏è  No service changes, just restarting..."
                docker-compose -f docker-compose.demo.yml restart
            fi

            echo ""
            echo "üíæ Disk usage after cleanup:"
            docker system df

            echo ""
            echo "‚úÖ Deployment completed successfully!"
            echo "üéâ Production is now running the latest code"

      - name: üîç Verify Deployment
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT || 22 }}
          script: |
            APP_DIR="${{ secrets.PRODUCTION_APP_DIR }}"
            if [ -z "$APP_DIR" ]; then
              APP_DIR="/opt/ai-dialer"
            fi

            cd "$APP_DIR"

            echo "üìä Final Service Status:"
            docker-compose -f docker-compose.demo.yml ps

            echo ""
            echo "üîç Testing endpoints..."

            # Test backend
            if docker exec ai-dialer-backend curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "‚úÖ Backend is responding"
            else
              echo "‚ö†Ô∏è  Backend health check failed"
            fi

            # Test frontend (if exists)
            if docker ps | grep -q "ai-dialer-frontend"; then
              if curl -f -s http://localhost:3001 > /dev/null 2>&1; then
                echo "‚úÖ Frontend is responding"
              else
                echo "‚ö†Ô∏è  Frontend health check failed"
              fi
            fi

            echo ""
            echo "üíæ Final disk space:"
            df -h / | grep -v Filesystem

      - name: ‚úÖ Deployment Success
        if: success()
        run: |
          echo "‚úÖ ========================================="
          echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
          echo "‚úÖ ========================================="
          echo ""
          echo "üì¶ Deployed commit: ${{ github.sha }}"
          echo "üí¨ Commit message: ${{ github.event.head_commit.message }}"
          echo "üë§ Deployed by: ${{ github.actor }}"
          echo "‚è∞ Time: $(date)"
          echo ""
          echo "üåê Your production app is now updated!"
          echo "üîó Check it at: https://atsservice.site/"
          echo ""
          echo "üìã Next steps:"
          echo "  1. Test AI calls: ssh to server and run 'bash production-test-now.sh'"
          echo "  2. Monitor: https://atsservice.site/ ‚Üí Live Monitoring"

      - name: ‚ùå Deployment Failed
        if: failure()
        run: |
          echo "‚ùå ========================================="
          echo "‚ùå DEPLOYMENT FAILED!"
          echo "‚ùå ========================================="
          echo ""
          echo "Please check the logs above for details."
          echo ""
          echo "Common issues:"
          echo "  1. SSH connection failed - check PRODUCTION_HOST, PRODUCTION_USER, PRODUCTION_SSH_KEY secrets"
          echo "  2. Disk space full - SSH to server and run disk cleanup"
          echo "  3. Git pull failed - check repository access on server"
          echo "  4. Docker build failed - check Dockerfile and dependencies"
          echo "  5. Health check failed - check application logs on server"
          echo ""
          echo "To investigate:"
          echo "  ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}"
          echo "  cd /opt/ai-dialer"
          echo "  df -h  # Check disk space"
          echo "  docker-compose -f docker-compose.demo.yml ps  # Check services"
          echo "  docker-compose -f docker-compose.demo.yml logs --tail=50  # Check logs"
          echo ""
          echo "To free disk space:"
          echo "  docker system prune -af"
          echo "  docker volume prune -f"
          exit 1
